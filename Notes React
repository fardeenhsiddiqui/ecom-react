Notes React
Your API key is: 2f1e2a841fba402e98901d310abbf390
Redux
Props
Context + Hooks 
API Integartion
Component 
State Management (1) -> Hooks(useState, useEffects)
Routing

Hooks : -
	1. useState (Setter without load)
	2. useEffect :- 
		Usage
			Connecting to an external system
			Wrapping Effects in custom Hooks
			Controlling a non-React widget
			Fetching data with Effects
			Specifying reactive dependencies
			Updating state based on previous state from an Effect
			Removing unnecessary object dependencies
			Removing unnecessary function dependencies
			Reading the latest props and state from an Effect
			Displaying different content on the server and the client
		Troubleshooting
			My Effect runs twice when the component mounts
			My Effect runs after every re-render
			My Effect keeps re-running in an infinite cycle
			My cleanup logic runs even though my component didn’t unmount
			My Effect does something visual, and I see a flicker before it runs.

		Dependency Array:
			1. Passing a dependency array 
				If you specify the dependencies, your Effect runs after the initial render and after re-renders with changed dependencies.

				useEffect(() => {
				  // ...
				}, [a, b]); // Runs again if a or b are different
			2. Passing an empty dependency array 
				If your Effect truly doesn’t use any reactive values, it will only run after the initial render.

				useEffect(() => {
				  // ...
				}, []); // Does not run again (except once in development)
			3. Passing no dependency array at all 
				If you pass no dependency array at all, your Effect runs after every single render (and re-render) of your component.

				useEffect(() => {
				  // ...
				}); // Always runs again

	3. useRef


Redux : -
	1. Redux helps you deal with shared state management.
	Redux is most useful in cases when:

		You have large amounts of application state that are needed in many places in the app
		The app state is updated frequently
		The logic to update that state may be complex
		The app has a medium or large-sized codebase, and might be worked on by many people
		You need to see how that state is being updated over time
		
1 .Reducers, as the name suggests, take in two things: previous state and an action. Then they reduce it (read it return) to one entity: the new updated instance of state. So reducers are basically pure JS functions which take in the previous state and an action and return the newly updated state.


Keep Mind
	1. whenever we didn't declared dependency or doesn't have dependency array then Maximum update depth exceeded (This can happen when a component calls setState inside useEffec)
	2. The dispatch function accepts an object that represents the type of action we want to execute when it is called. Basically, it sends the type of action to the reducer function to perform its job, which, of course, is updating the state.


Fardeen
	library(list, card)
	checksheet(list)

